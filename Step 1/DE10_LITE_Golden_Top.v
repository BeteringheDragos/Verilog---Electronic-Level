//
//===========================================================================

// Ver :| Author :| Mod. Date :| Changes Made:
// V1.1 :| Alexandra Du :| 06/01/2016:| Added Verilog file
//
//===========================================================================


//=======================================================
// This code is generated by Terasic System Builder
//=======================================================
	`define ENABLE_ADC_CLOCK
	`define ENABLE_CLOCK1
	`define ENABLE_CLOCK2
	`define ENABLE_SDRAM
	`define ENABLE_HEX0
	`define ENABLE_HEX1
	`define ENABLE_HEX2
	`define ENABLE_HEX3
	`define ENABLE_HEX4
	`define ENABLE_HEX5
	`define ENABLE_KEY
	`define ENABLE_LED
	`define ENABLE_SW
	`define ENABLE_VGA
	`define ENABLE_ACCELEROMETER
	`define ENABLE_ARDUINO
	`define ENABLE_GPIO
module DE10_LITE_Golden_Top(
//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input ADC_CLK_10,
`endif
//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input MAX10_CLK1_50,
`endif
//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input MAX10_CLK2_50,
`endif
//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output [12:0] DRAM_ADDR,
	output [1:0] DRAM_BA,
	output DRAM_CAS_N,
	output DRAM_CKE,
	output DRAM_CLK,
	output DRAM_CS_N,
	inout [15:0] DRAM_DQ,
	output DRAM_LDQM,

	output DRAM_RAS_N,
	output DRAM_UDQM,
	output DRAM_WE_N,
`endif
//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output reg [7:0] HEX0,
`endif

`ifdef ENABLE_HEX1
	output reg [7:0] HEX1,
`endif

`ifdef ENABLE_HEX2
	output reg [7:0] HEX2,
`endif

`ifdef ENABLE_HEX3
	output reg [7:0] HEX3,
`endif

`ifdef ENABLE_HEX4
	output reg [7:0] HEX4,
`endif

`ifdef ENABLE_HEX5
	output reg [7:0] HEX5,
`endif
//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input [1:0] KEY,
`endif
//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output [9:0] LEDR,
`endif
//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input [9:0] SW,
`endif
//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output [3:0] VGA_B,
	output [3:0] VGA_G,
	output VGA_HS,
	output [3:0] VGA_R,
	output VGA_VS,
`endif
//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output GSENSOR_CS_N,
	input [2:1] GSENSOR_INT,
	output GSENSOR_SCLK,
	inout GSENSOR_SDI,
	inout GSENSOR_SDO,
`endif
//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout [15:0] ARDUINO_IO,

	inout ARDUINO_RESET_N,
`endif
//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout [35:0] GPIO
`endif
);

//=======================================================
// REG/WIRE declarations
//=======================================================
wire clk;
wire spi_clk;
wire oe;
wire sdo;
wire ack;
wire [7:0] rd_data;
wire req;
wire [7:0] display_value;
wire falling_edge;

assign GSENSOR_SDI = oe ? sdo : 1'bz;

//=======================================================
// PLL
//=======================================================
pll_spi pll_spi_inst (
    .areset (!KEY[0]),
    .inclk0 (MAX10_CLK1_50),
    .c0     (clk),
    .c1     (spi_clk),
    .locked (LEDR[9])
);

//=======================================================
// Edge detector pentru buton KEY[1] - trimite req
//=======================================================
edge_detector edg_det (
    .clk(clk),
    .rst_n(KEY[0]),
    .signal_in(KEY[1]),
    .falling_edge(falling_edge),
   // .req(req)
);

//=======================================================
// SPI master (doar citire)
//=======================================================
spi_phy spi_master (
    .clk_i      (clk),
    .rst_ni     (KEY[0]),
    .spi_clk_i  (spi_clk),

   // .req_i      (req),
    .rw_ni      (1'b1),               // doar citire
    .addr_i     (SW[5:0]),            // adresa selectată de întrerupătoare
    .wr_data_i  (8'b00000000),        // date inutile la citire

    .ack_o      (ack),
    .rd_data_o  (rd_data),

    .spi_cs_no  (GSENSOR_CS_N),
    .spi_clk_o  (GSENSOR_SCLK),
    .spi_data_o (sdo),
    .spi_data_i (GSENSOR_SDI),
    .spi_oe_o   (oe)
);

//=======================================================
// Registru - salvează valoarea citită
//=======================================================
register reg_data (
    .clk(clk),
    .rst_n(KEY[0]),
    .enable(ack),           // când SPI termină citirea
    .data_in(rd_data),
    .data_out(display_value)
);

//=======================================================
// Output către LED-uri
//=======================================================
assign LEDR[7:0] = display_value;





endmodule

