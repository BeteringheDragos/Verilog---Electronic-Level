// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

	wire rst_n = KEY[0];
	wire clk = MAX10_CLK1_50;
	wire [11:0] pozitie_orizontala;
	wire pozitie_verticala;
	wire [25:0] freq_div;
	wire [3:0] step_out;
	wire [3:0] step_in;

//=======================================================
//  Structural coding
//=======================================================

		freq_divizor_and_step freq_unit(
		.clk		(clk),
		.rst_n		(rst_n),
		.speed		(SW),
		.freq_div	(freq_div),
		.step_out	(step_out)
		);
		
		position_controller position_unit(
		.clk				(clk),
		.rst_n				(rst_n),
		.step_in			(step_out),
		.pozitie_orizontala	(pozitie_orizontala),
		.pozitie_verticala	(pozitie_verticala)
		);
		
		ctrl_hex_b H0(
		.enable		(pozitie_orizontala[0] || pozitie_orizontala[11]),
		.pozitie		(pozitie_verticala),
		.hex_out	(HEX0)
		);
		
		ctrl_hex_b H1(
		.enable		(pozitie_orizontala[1] || pozitie_orizontala[10]),
		.pozitie		(pozitie_verticala),
		.hex_out	(HEX1)
		);
		
		ctrl_hex_b H2(
		.enable		(pozitie_orizontala[2] || pozitie_orizontala[9]),
		.pozitie		(pozitie_verticala),
		.hex_out	(HEX2)
		);
		
		ctrl_hex_b H3(
		.enable		(pozitie_orizontala[3] || pozitie_orizontala[8]),
		.pozitie		(pozitie_verticala),
		.hex_out	(HEX3)
		);
		
		ctrl_hex_b H4(
		.enable		(pozitie_orizontala[4] || pozitie_orizontala[7]),
		.pozitie		(pozitie_verticala),
		.hex_out	(HEX4)
		);
		
		ctrl_hex_b H5(
		.enable		(pozitie_orizontala[5] || pozitie_orizontala[6]),
		.pozitie		(pozitie_verticala),
		.hex_out	(HEX5)
		);
endmodule